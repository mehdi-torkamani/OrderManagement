// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StockMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OrderManagement.EventStore.Messages {

  /// <summary>Holder for reflection information generated from StockMessage.proto</summary>
  public static partial class StockMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for StockMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StockMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJTdG9ja01lc3NhZ2UucHJvdG8SCkV2ZW50U3RvcmUingEKDFN0b2NrTWVz",
            "c2FnZRIKCgJJZBgBIAEoCRIOCgZTeW1ib2wYAiABKAkSJwoGQ2hhbmdlGAMg",
            "ASgLMhcuRXZlbnRTdG9yZS5TdG9ja0NoYW5nZRIiCgZNYXJrZXQYBCABKAsy",
            "Ei5FdmVudFN0b3JlLk1hcmtldBIlCghDb21tZW50cxgFIAMoCzITLkV2ZW50",
            "U3RvcmUuQ29tbWVudCJdCgtTdG9ja0NoYW5nZRINCgVQcmljZRgBIAEoARIT",
            "CgtQcmljZUNoYW5nZRgCIAEoARIYChBQZXJjZW50YWdlQ2hhbmdlGAMgASgB",
            "EhAKCERhdGVUaW1lGAQgASgJIlAKBk1hcmtldBIOCgZTeW1ib2wYASABKAkS",
            "DAoEQ2l0eRgCIAEoCRIoCgZTdGF0dXMYAyABKA4yGC5FdmVudFN0b3JlLk1h",
            "cmtldFN0YXR1cyJHCgdDb21tZW50EgoKAklkGAEgASgFEg0KBVRpdGxlGAIg",
            "ASgJEg8KB0NvbnRlbnQYAyABKAkSEAoIRGF0ZVRpbWUYBCABKAkqJAoMTWFy",
            "a2V0U3RhdHVzEggKBE9wZW4QABIKCgZDbG9zZWQQAUImqgIjT3JkZXJNYW5h",
            "Z2VtZW50LkV2ZW50U3RvcmUuTWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::OrderManagement.EventStore.Messages.MarketStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OrderManagement.EventStore.Messages.StockMessage), global::OrderManagement.EventStore.Messages.StockMessage.Parser, new[]{ "Id", "Symbol", "Change", "Market", "Comments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OrderManagement.EventStore.Messages.StockChange), global::OrderManagement.EventStore.Messages.StockChange.Parser, new[]{ "Price", "PriceChange", "PercentageChange", "DateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OrderManagement.EventStore.Messages.Market), global::OrderManagement.EventStore.Messages.Market.Parser, new[]{ "Symbol", "City", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OrderManagement.EventStore.Messages.Comment), global::OrderManagement.EventStore.Messages.Comment.Parser, new[]{ "Id", "Title", "Content", "DateTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MarketStatus {
    [pbr::OriginalName("Open")] Open = 0,
    [pbr::OriginalName("Closed")] Closed = 1,
  }

  #endregion

  #region Messages
  public sealed partial class StockMessage : pb::IMessage<StockMessage> {
    private static readonly pb::MessageParser<StockMessage> _parser = new pb::MessageParser<StockMessage>(() => new StockMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StockMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OrderManagement.EventStore.Messages.StockMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockMessage(StockMessage other) : this() {
      id_ = other.id_;
      symbol_ = other.symbol_;
      Change = other.change_ != null ? other.Change.Clone() : null;
      Market = other.market_ != null ? other.Market.Clone() : null;
      comments_ = other.comments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockMessage Clone() {
      return new StockMessage(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Change" field.</summary>
    public const int ChangeFieldNumber = 3;
    private global::OrderManagement.EventStore.Messages.StockChange change_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OrderManagement.EventStore.Messages.StockChange Change {
      get { return change_; }
      set {
        change_ = value;
      }
    }

    /// <summary>Field number for the "Market" field.</summary>
    public const int MarketFieldNumber = 4;
    private global::OrderManagement.EventStore.Messages.Market market_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OrderManagement.EventStore.Messages.Market Market {
      get { return market_; }
      set {
        market_ = value;
      }
    }

    /// <summary>Field number for the "Comments" field.</summary>
    public const int CommentsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::OrderManagement.EventStore.Messages.Comment> _repeated_comments_codec
        = pb::FieldCodec.ForMessage(42, global::OrderManagement.EventStore.Messages.Comment.Parser);
    private readonly pbc::RepeatedField<global::OrderManagement.EventStore.Messages.Comment> comments_ = new pbc::RepeatedField<global::OrderManagement.EventStore.Messages.Comment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OrderManagement.EventStore.Messages.Comment> Comments {
      get { return comments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StockMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StockMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Change, other.Change)) return false;
      if (!object.Equals(Market, other.Market)) return false;
      if(!comments_.Equals(other.comments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (change_ != null) hash ^= Change.GetHashCode();
      if (market_ != null) hash ^= Market.GetHashCode();
      hash ^= comments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (change_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Change);
      }
      if (market_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Market);
      }
      comments_.WriteTo(output, _repeated_comments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (change_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Change);
      }
      if (market_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Market);
      }
      size += comments_.CalculateSize(_repeated_comments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StockMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.change_ != null) {
        if (change_ == null) {
          change_ = new global::OrderManagement.EventStore.Messages.StockChange();
        }
        Change.MergeFrom(other.Change);
      }
      if (other.market_ != null) {
        if (market_ == null) {
          market_ = new global::OrderManagement.EventStore.Messages.Market();
        }
        Market.MergeFrom(other.Market);
      }
      comments_.Add(other.comments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            if (change_ == null) {
              change_ = new global::OrderManagement.EventStore.Messages.StockChange();
            }
            input.ReadMessage(change_);
            break;
          }
          case 34: {
            if (market_ == null) {
              market_ = new global::OrderManagement.EventStore.Messages.Market();
            }
            input.ReadMessage(market_);
            break;
          }
          case 42: {
            comments_.AddEntriesFrom(input, _repeated_comments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StockChange : pb::IMessage<StockChange> {
    private static readonly pb::MessageParser<StockChange> _parser = new pb::MessageParser<StockChange>(() => new StockChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StockChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OrderManagement.EventStore.Messages.StockMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockChange(StockChange other) : this() {
      price_ = other.price_;
      priceChange_ = other.priceChange_;
      percentageChange_ = other.percentageChange_;
      dateTime_ = other.dateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockChange Clone() {
      return new StockChange(this);
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 1;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "PriceChange" field.</summary>
    public const int PriceChangeFieldNumber = 2;
    private double priceChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceChange {
      get { return priceChange_; }
      set {
        priceChange_ = value;
      }
    }

    /// <summary>Field number for the "PercentageChange" field.</summary>
    public const int PercentageChangeFieldNumber = 3;
    private double percentageChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PercentageChange {
      get { return percentageChange_; }
      set {
        percentageChange_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 4;
    private string dateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StockChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StockChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Price != other.Price) return false;
      if (PriceChange != other.PriceChange) return false;
      if (PercentageChange != other.PercentageChange) return false;
      if (DateTime != other.DateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (PriceChange != 0D) hash ^= PriceChange.GetHashCode();
      if (PercentageChange != 0D) hash ^= PercentageChange.GetHashCode();
      if (DateTime.Length != 0) hash ^= DateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Price != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Price);
      }
      if (PriceChange != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PriceChange);
      }
      if (PercentageChange != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PercentageChange);
      }
      if (DateTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (PriceChange != 0D) {
        size += 1 + 8;
      }
      if (PercentageChange != 0D) {
        size += 1 + 8;
      }
      if (DateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StockChange other) {
      if (other == null) {
        return;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.PriceChange != 0D) {
        PriceChange = other.PriceChange;
      }
      if (other.PercentageChange != 0D) {
        PercentageChange = other.PercentageChange;
      }
      if (other.DateTime.Length != 0) {
        DateTime = other.DateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Price = input.ReadDouble();
            break;
          }
          case 17: {
            PriceChange = input.ReadDouble();
            break;
          }
          case 25: {
            PercentageChange = input.ReadDouble();
            break;
          }
          case 34: {
            DateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Market : pb::IMessage<Market> {
    private static readonly pb::MessageParser<Market> _parser = new pb::MessageParser<Market>(() => new Market());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Market> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OrderManagement.EventStore.Messages.StockMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Market() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Market(Market other) : this() {
      symbol_ = other.symbol_;
      city_ = other.city_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Market Clone() {
      return new Market(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "City" field.</summary>
    public const int CityFieldNumber = 2;
    private string city_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::OrderManagement.EventStore.Messages.MarketStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OrderManagement.EventStore.Messages.MarketStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Market);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Market other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (City != other.City) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (City.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(City);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Market other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            City = input.ReadString();
            break;
          }
          case 24: {
            status_ = (global::OrderManagement.EventStore.Messages.MarketStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Comment : pb::IMessage<Comment> {
    private static readonly pb::MessageParser<Comment> _parser = new pb::MessageParser<Comment>(() => new Comment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Comment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OrderManagement.EventStore.Messages.StockMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Comment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Comment(Comment other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      content_ = other.content_;
      dateTime_ = other.dateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Comment Clone() {
      return new Comment(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 4;
    private string dateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Comment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Comment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (DateTime != other.DateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (DateTime.Length != 0) hash ^= DateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (DateTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (DateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Comment other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.DateTime.Length != 0) {
        DateTime = other.DateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            DateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
